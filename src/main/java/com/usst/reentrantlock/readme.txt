reentranLock的功能和synchronized类似
  语法
  ----------------------------------------------------------------------------------------
  reentrantLock.lock();     // 获取锁，能进入到房子里面做事情，那么该线程它是这把锁的拥有者  (相当于synchronized的第一个大括号)，
  往下执行就是获取成功，否则则会阻塞在该处
  try {
   // 临界区
  } finally {

   reentrantLock.unlock();    // 释放锁(相当于synchronized的最后那个个大括号，代码内容结束释放锁)
  }
  -----------------------------------------------------------------------------------------

但是区别如下
1、可中断
2、可以设置超时时间，就是该锁等待一段时间后如果超时则不会去等待锁了。会去做些其他的事情
3、可以设置为公平锁
4、支持多个条件变量(相当于synchronized 里面waitSet，reentranLock里面有多个waitset()，如果条件满足则唤醒该set里面的值，不会像
     synchronized一样条件满足把全部waitSet唤醒或者唤醒其中的一个)